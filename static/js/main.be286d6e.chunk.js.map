{"version":3,"sources":["components/header/Header.js","components/pokemon-card/PokemonCard.js","utils/PokemonTypeColorGeneartor.js","containers/pokemon-grid/PokemonGrid.js","App.js","serviceWorker.js","index.js"],"names":["HeaderContainer","styled","div","_templateObject","Header","react_default","a","createElement","PokemonCardContainer","PokemonCard_templateObject","props","color","PokemonName","_templateObject2","PokemonPhoto","_templateObject3","PokemonNumber","_templateObject4","PokemonTypes","_templateObject5","PokemonCard","name","src","img","num","types","typeColorPairs","grass","fire","water","bug","normal","poison","electric","ground","rock","psychic","fighting","dragon","fairy","ice","ghpst","flying","dark","default","generateColorForType","type","toLowerCase","PokemonGridContainer","PokemonGrid_templateObject","PokemonGrid","pokemon","map","pokemon_card_PokemonCard","join","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filteredPokemon","searchValue","onInputChange","bind","assertThisInitialized","_this2","axios","get","then","res","data","setState","e","toConsumableArray","filter","includes","target","value","trim","AppContainer","header_Header","SearchContainer","TextField","id","label","variant","size","fullWidth","onChange","pokemon_grid_PokemonGrid","Credits","href","React","Component","App_templateObject","App_templateObject2","App_templateObject3","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be286d6e.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = () => {\n    return (\n        <HeaderContainer>\n          POKéDEX\n        </HeaderContainer>\n    )\n}\n\nconst HeaderContainer = styled.div`\nbackground-color: #419EAE;\ncolor: white;\nfont-size: 210%;\nfont-weight: bold;\nfont-family: Abel, sans-serif;\nletter-spacing: 0.1em;\nwidth: 100%;\npadding: 1%;\n`;\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\n\nconst PokemonCard = (props) => {\n    return (\n        <PokemonCardContainer color={props.color}>\n            <PokemonName color={props.color}>{props.name}</PokemonName>\n                <PokemonPhoto>\n                    <img src={props.img} ></img>\n                </PokemonPhoto>\n                    <PokemonNumber>{props.num}</PokemonNumber>\n                    <PokemonTypes>Type:  {props.types} </PokemonTypes>\n        </PokemonCardContainer>\n    )\n}\n\nconst PokemonCardContainer = styled.div`\n    border-radius: 0.8em;\n    border: ${props => \"3px solid \"+props.color || \"\"};\n    height: 13em;\n    display: flex;\n    width: 12em;\n    margin: 2% 2% 2% 2%;\n    flex-direction: column;\n    text-align: center;\n    text-transform: uppercase;\n    transition: all linear 0.5s;\n    transition: transform .2s;\n    &:hover {\n        -ms-transform: scale(1.06);\n        -webkit-transform: scale(1.06);\n        transform: scale(1.06); \n        box-shadow: 0 4px 8px 0 rgba(46, 44, 44, 0.2), 0 6px 20px 0 rgba(49, 48, 48, 0.19);\n    }\n`;\nconst PokemonName = styled.div`\n    letter-spacing: 0.2em;\n    padding: 2% 0 2% 0;\n    color: white;\n    border-radius: 0.2em;\n    background-color: ${props => props.color || \"rgb(138, 189, 180)\"};\n`\nconst PokemonPhoto = styled.div`\n    padding-top: 1%;\n    align-self: center;\n`;\n\nconst PokemonNumber = styled.div`\n    font-size: 0.6em;\n    padding-bottom: 2%;\n    font-family: Oswald, sans-serif;\n    font-weight: bold;\n    letter-spacing: 0.1em;\n    color: rgb(65, 61, 61);\n`;\nconst PokemonTypes = styled.div`\n    color: rgb(65, 61, 61);\n    font-size: 0.9em;\n    padding-bottom: 3%;\n    font-family: Oswald, sans-serif;\n    letter-spacing: 0.1em;\n    font-weight: bold;\n`;\nexport default PokemonCard;","const typeColorPairs = {\n    \"grass\":\"#78C850\",\n    \"fire\":\"#F08030\",\n    \"water\":\"#6890F0\",\n    \"bug\":\"#A8B820\",\n    \"normal\":\"#A8A878\",\n    \"poison\":\"#A040A0\",\n    \"electric\":\"#F8D030\",\n    \"ground\":\"#E0C068\",\n    \"rock\":\"#B8A038\",\n    \"psychic\":\"#F85888\",\n    \"fighting\":\"#C03028\",\n    \"dragon\":\"#7038F8\",\n    \"fairy\":\"#EE99AC\",\n    \"ice\":\"#98D8D8\",\n    \"ghpst\":\"#705898\",\n    \"flying\":\"#A890F0\",\n    \"dark\":\"#705848\",\n    \"default\":\"#68A090\"\n}\nexport const generateColorForType = (type) => {\n    let color = typeColorPairs[type.toLowerCase()];\n    if (!color) {\n        color = typeColorPairs[\"default\"];\n    }\n    return color;\n}","import React from 'react';\nimport styled from 'styled-components';\nimport PokemonCard from '../../components/pokemon-card/PokemonCard';\nimport { generateColorForType } from '../../utils/PokemonTypeColorGeneartor';\n\nconst PokemonGrid = (props) => {\n    return (\n        <PokemonGridContainer>\n            { props.pokemon.map(pokemon => {\n                return (\n                    <PokemonCard\n                        name={pokemon.name}\n                        img={pokemon.img}\n                        num={pokemon.num}\n                        types={pokemon.type.join()}\n                        key={pokemon.name}\n                        color={generateColorForType(pokemon.type[0])}\n                    />\n                )\n            }\n            )}\n        </PokemonGridContainer>\n    )\n}\n\nconst PokemonGridContainer = styled.div`\n    color: white;\n    font-weight: bold;\n    font-family: Abel, sans-serif;\n    letter-spacing: 0.1em;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-self: center;\n    justify-content: center;\n    width: 95%;\n    margin-bottom: 3%;\n`;\n\nexport default PokemonGrid;","import React from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport Header from './components/header/Header';\nimport PokemonGrid from './containers/pokemon-grid/PokemonGrid';\nimport TextField from '@material-ui/core/TextField';\n\nconst URL = 'https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pokemon: [],\n      filteredPokemon: [],\n      searchValue: ''\n        }\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(URL)\n      .then(res => {\n        const pokemon = res.data.pokemon;\n        this.setState({\n          pokemon: pokemon,\n          filteredPokemon: pokemon\n        });\n      })\n  }\n\n  onInputChange(e) {\n    let pokemon = [...this.state.pokemon];\n    pokemon = pokemon.filter(pokemon => pokemon.name.toLowerCase().includes(e.target.value.toLowerCase().trim()));\n    this.setState({\n      filteredPokemon: pokemon,\n      searchValue: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <AppContainer>\n        <Header />\n        <SearchContainer>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Enter a Pokémon name\"\n            variant=\"outlined\"\n            size='medium'\n            fullWidth\n            onChange={this.onInputChange}\n            value={this.state.searchValue}\n          />\n        </SearchContainer>\n        <PokemonGrid\n          pokemon={this.state.filteredPokemon}\n        />\n        <Credits>\n          <p>Made with love by <a href=\"https://github.com/dina-sour\">Dina Matveev</a></p>\n        </Credits>\n      </AppContainer>\n    );\n  }\n}\n\nconst AppContainer = styled.div`\n  box-sizing: border-box;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  display: flex;\n  flex-direction: column;\n  overflow-x:hidden;\n`;\n\nconst SearchContainer = styled.div`\n  margin-top: 4%;\n  align-self: center;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items:center;\n  width: 40%;\n`;\n\nconst Credits = styled.div`\n  margin-left: 0.5em;\n  bottom: 0;\n  text-align: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}